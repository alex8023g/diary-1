datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id       String    @id @default(nanoid())
  date     DateTime  @default(now())
  // updatedAt DateTime? @updatedAt
  // title     String   @db.VarChar(255)
  content  String
  // published Boolean  @default(false)
  author   User      @relation(fields: [authorId], references: [id])
  authorId String
  // tags      PostTag  @relation(fields: [postTagId], references: [id])
  // postTagId String   @unique
  // tags      PostTag[] @default([])
  postTags PostTags?
}

// enum PostTag {
//   RED
//   GREEN
//   BLUE
//   YELLOW
// }

model PostTags {
  // id     String  @id @default(nanoid())
  red     Boolean
  green   Boolean
  blue    Boolean
  yellow  Boolean
  fuchsia Boolean @default(false)
  post    Post    @relation(fields: [postId], references: [id])
  postId  String  @unique
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique
}

// model User {
//   id       Int      @id @default(autoincrement())
//   username String   @unique
//   password String
//   posts    Post[]
//   profile  Profile?
// }

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  posts         Post[]
  profile       Profile?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
